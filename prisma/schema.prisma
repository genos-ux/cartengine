generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  refreshTokens UserRefreshTokens[]
  addresses Address[]
  cartItems CartItem[]
  orders Order[]

  @@map("users")
}

model UserRefreshTokens {
  id Int @id @default(autoincrement())
  refreshToken String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], map: "addresses_userId_fkey")
  @@map("addresses")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String  
  description String   @db.Text
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@fulltext([name, description, tags])

  cartItems CartItem[]
  orders OrderProduct[]

  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  netAmount Decimal
  status OrderEventStatus @default(PENDING)
  address String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProduct[]
  events OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId    Int
  order      Order     @relation(fields: [orderId], references: [id])
  productId    Int
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int      @id @default(autoincrement())
  orderId    Int
  order      Order     @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_event")
}
